[general]
# Output folder path.
out_folder = out_data_uniref
# Seed for random number generator.
seed = 10
# Floating point precision; float32 OR float64 (float64 is recommended).
precision = float64

[data]
# File containing training sequences.
files_path = data_uniref
# Prefix that all dataset file names start with, or file name if there is just one.
start_token = imgt_transition_count_lag_5_shuf.tsv
# If the data is in sparse format (summarize does not output a sparse format).
sparse = False
# Number of columns in the count data. Ex: 3 for train, test and reference.
num_ds = 2
# One of dna, rna or prot.
alphabet = prot
# Which column has the training data.
train_column = 0
# Which column has the testing data.
test_column = 1
## Which column has the reference data.
reference_column = 1

[hyperp]
# Lag of the model.
lag = 5

[train]
# Whether or not to train
train = True
# Epochs.
epochs = 100
# Minibatch size.
batch_size = 1500
# Keras optimizer. Adam recommended.
optimizer_name = Adam
# Learning rate.
learning_rate = 0.01
# Whether or not to train an AR model rather than an EAR model.
train_ar = False
# How many steps to accumulate gradients over.
accumulation_steps = 1
# Whether or not to cache loaded counts and raw kmers. 0 for False, 1 for true
cache = True
# Whether or not to restart from a checkpoint
restart = False
# Location of output folder to restart from.
restart_path = temp_name

[test]
# Whether or not to evaluate the performance of the trained model on a test set.
test = True
# Whether or not to evaluate the performance of the trained model on the training data.
train_test = True
# Prior regularization for vanilla BEAR model. Make sure to put decimals after . .
van_reg = [0.1, 1.0, 10.0]

[model]
# Type of AR function embedded in the model. One of cnn, linear, or stop.
ar_func_name = cnn
# Dictionary of ar_func argument. Make sure to use double quotes.
af_kwargs = {"num_filters" : 30, "filter_width" : 3, "kmer_layer1_width" : 16}

[results]
